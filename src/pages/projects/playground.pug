extends ../../layouts/main

block naked
  +section('Code Playground')
    .py-2
      button.bg-white.text-gray-800.font-semibold.py-2.px-4.border.border-gray-400.rounded.shadow#preview-button( class=" hover:bg-gray-100" )
        | Preview
    #layout.grid.grid-cols-2
      #editor.w-full.border.border-gray-300.text-md( style="height: 60vh" )
        | import { render, c } from 'https://unpkg.com/declarativas?module=1';
        | const canvas = document.querySelector('canvas');
        | canvas.width = window.innerWidth;
        | canvas.height = window.innerHeight;

      #preview-container.h-full
        #preview-status.bg-purple-700.text-gray-300.flex.flex-col.justify-center.items-center.text-2xl.font-bold.h-full
          | Waiting for code...
        iframe#preview-frame.w-full.h-full.hidden

  template#template
    doctype html
    head
      style
        | html, body { padding: 0; margin: 0; }
        | body { width: 100vw; height: 100vh; }
    body
      canvas
      script( type="module" ).
        //--code--

  script(src="https://pagecdn.io/lib/ace/1.4.5/ace.js" integrity="sha256-5Xkhn3k/1rbXB+Q/DX/2RuAtaB4dRRyQvMs83prFjpM=" crossorigin="anonymous")
  script.
    const editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
    editor.session.setMode("ace/mode/javascript");

    const previewContainer = document.querySelector('#preview-container');
    const previewStatus = previewContainer.querySelector('#preview-status');
    const previewFrame = previewContainer.querySelector('#preview-frame');
    const template = document.querySelector('template#template').innerHTML;

    const makeDataUrl = () => {
      const linesOfCode = editor.getValue().split('\n');
      const isImportRegexp = /import /;

      const { imports, source } = linesOfCode.reduce((memo, line) => {
        const statements = line.split(';');

        return {
          imports: [...memo.imports, ...statements.filter(s => isImportRegexp.test(s))],
          source: [...memo.source, statements.filter(s => !isImportRegexp.test(s)).join(';')],
        };
      }, { imports: [], source: [] });

      const code = `${imports.join('\n')}
      try {
        ${source.join('\n')}
      } catch (err) {
        parent.postMessage({ type: 'error', message: err.toString() }, '*');
      }`;

      return `data:text/html;charset=utf-8;base64,${btoa(template.replace('//--code--', code))}`;
    };

    const showPreviewStatus = (html) => {
      previewFrame.classList.add('hidden');
      previewStatus.classList.remove('hidden');
      previewStatus.innerHTML = html;
    };
    const hidePreviewStatus = () => previewStatus.classList.add('hidden');

    const showPreview = () => {
      hidePreviewStatus();
      previewFrame.classList.remove('hidden');
      previewFrame.src = makeDataUrl();
    };

    document
      .querySelector('button#preview-button')
      .addEventListener('click', showPreview);

    window.addEventListener('message', (event) => {
      if (event.data.type !== 'error') return;
      showPreviewStatus('Oops! Your code has some errors.');
    }, false);
